{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww12540\viewh16140\viewkind1
\deftab720
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\f0\fs22 \cf0 Thabo James Maboya\
React Focus Questionnaire\
\
JavaScript:\
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 1.	Arrow functions; admittedly i\'92ve never used the traditional functions and function components for long, in my world arrow functions have always been the only way to write functions, they are simple, short and straight to the point.\
2.	Coming from a java background, a class /component is defined by name, parameters and action /method and return defined. Whereas Arrow functions could just use one line of code to execute all of that. Moreover, arrow functions are like a simplified logical expression (ES6)\
3.	Yes, regular function syntax is basically defining the component explicitly while ie. calling it a function, defining the arguments and the return value of the function, while the short arrow function goes straight into the argument definition and the return.\
4.	myFunctionCall(++foo) : the function is either incrementing by the value foo or the function is incorrect, while myFunctionCall(foo++): the function arguments foo is being incremented.\
5.	javaScript class can only exist as one in a single .jsx file, it has constructors and the render function, and can be used to run other functions. While a function is a subset /feature used by the Class.\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 \
Css:\
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 6.	Styling HTML tags. Yes HTML5 has built- in styling capabilities, Css function introduces factorisations allowing tags to be universally defined and used across HTML neatly.\
7.	!important is used when you want to override a default definition /styling that may be used for a specific tag ie. having <h1> tag color defined as red universally but wanting to have a specific color in  a different section. You would use !important to override the primary color for this specific section.\
8.	Depends on what the desired outcome is. Flex is flexible to the display thus usually making it favorable in most cases, but grid over takes when you are working with specific layouts, especially when working with a long list.\
9.	 Yes, I make use of them all the time when you want a tag to move even further in the direction specified. example, margin-left: -20px. \
10.	Margin of the <div> is not defined, thus allowing the <p> styling and margin definition to override /define the margin for the <div> tag. In a way not defining the <div> styling allows it to be flexible. This can be prevented by defining the styles of the <d>.\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 \
\
\
React\
\pard\pardeftab720\li720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 \
}